
using Mirosoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.EntityFrameworkCore;
using SieveApp.Data;
using SieveApp.Models;
using SieveApp.Services;
using SieveApp;
using BCrypt.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Добавление сервисов
builder.Services.AddControllers();
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlite("Data Source=app.db"));
builder.Services.AddScoped<SieveService>();


// Регистрация JwtService
var jwtKey = builder.Configuration["Jwt:Key"];
if (string.IsNullOrEmpty(jwtKey))
{
    throw new Exception("Jwt:Key не найден в appsettings.json. Убедитесь, что ключ добавлен.");
}

builder.Services.AddScoped<JwtService>(provider =>
    new JwtService(jwtKey));

// Добавление аутентификации JWT
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = false,
            ValidateAudience = false,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey))
        };
    });


// Включение CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policyBuilder =>
        policyBuilder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
});

var app = builder.Build();

// Применение миграций и создание базы данных
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    dbContext.Database.EnsureCreated(); // Создаем базу данных, если она не существует
}


// Регистрация пользователя через консоль
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();

    Console.WriteLine("=== User Registration ===");
    Console.Write("Enter username: ");
    var username = Console.ReadLine();

    if (string.IsNullOrWhiteSpace(username))
    {
        Console.WriteLine("Ошибка: Логин не может быть пустым.");
        return;
    }

    if (username.Length < 3)
    {
        Console.WriteLine("Ошибка: Логин должен содержать минимум 3 символа.");
        return;
    }
    if (dbContext.Users.Any(u => u.Username == username))
    {
        Console.WriteLine("Ошибка: Пользователь с таким логином уже существует.");
        return;
    }

    Console.Write("Enter password: ");
    var password = Console.ReadLine();

    if (string.IsNullOrWhiteSpace(password))
    {
        Console.WriteLine("Ошибка: Пароль не может быть пустым.");
        return;
    }

    if (password.Length < 6)
    {
        Console.WriteLine("Ошибка: Пароль должен содержать минимум 6 символов.");
        return;
    }

    var passwordHash = BCrypt.Net.BCrypt.HashPassword(password);

    var newUser = new User
    {
        Username = username,
        PasswordHash = passwordHash,
        Token = null
    };

    dbContext.Users.Add(newUser);
    dbContext.SaveChanges();

    Console.WriteLine("Пользователь успешно зарегистрирован.");
}

// Логин пользователя через консоль
using (var scope = app.Services.CreateScope())
{
    var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();

    Console.WriteLine("\n=== User Login ===");
    Console.Write("Enter username: ");
    var loginUsername = Console.ReadLine();
    Console.Write("Enter password: ");
    var loginPassword = Console.ReadLine();

    var user = dbContext.Users.SingleOrDefault(u => u.Username == loginUsername);
    if (user == null || !BCrypt.Net.BCrypt.Verify(loginPassword ?? string.Empty, user.PasswordHash))
    {
        Console.WriteLine("Ошибка: Неверный логин или пароль.");
        return;
    }

    // Генерация токена
    var jwtService = scope.ServiceProvider.GetRequiredService<JwtService>();
    var token = jwtService.GenerateToken(user.Id);

    // Обновление токена в базе данных (опционально)
    user.Token = token;
    dbContext.SaveChanges();

    Console.WriteLine("Пользователь успешно авторизован.");
    Console.WriteLine($"Токен: {token}");
}


using (var scope = app.Services.CreateScope())
{
    var sieveService = scope.ServiceProvider.GetRequiredService<SieveService>();

    while (true)
    {
        Console.Write("Введите натуральное число N (от 1 до 50): ");
        var input = Console.ReadLine();
        if (int.TryParse(input, out int limit) && limit >= 1 && limit <= 50)
        {
            LimitStorage.CurrentLimit = limit; // Установка предельного числа

            // Получаем простые числа и выводим их в терминал
            var primes = sieveService.SieveOfAtkin(limit);

            Console.WriteLine($"Простые числа до {limit}:");
            foreach (var prime in primes)
            {
                Console.WriteLine(prime);
            }

            break;
        }
        else
        {
            Console.WriteLine("Ошибка: введите корректное число от 1 до 50.");
        }
    }
}


app.UseCors("AllowAll");
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers(); // Регистрация маршрутов контроллеров

app.MapGet("/", context =>
{
    context.Response.Redirect($"/api/sieve/prime-numbers-html", permanent: false);
    return Task.CompletedTask;
});


app.Run();


// Models
namespace SieveApp.Models
{
    public class User
    {
        public int Id { get; set; }
        public string? Username { get; set; }
        public string? PasswordHash { get; set; }
        public string? Token { get; set; }
    }

     public class History
    {
        public int Id { get; set; }
        public int UserId { get; set; }
        public DateTime Date { get; set; }
    }

    public class RegisterRequest
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
     public class LoginRequest
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }
}

// Services
namespace SieveApp.Services
{
    public class SieveService
    {
        public List<int> SieveOfAtkin(int limit)
        {
            var primes = new List<int>();
            if (limit <= 1) return primes;

            bool[] isPrime = new bool[limit + 1];
            isPrime[2] = true;
            isPrime[3] = true;
            for (int x = 1; x * x <= limit; x++)
            {
                for (int y = 1; y * y <= limit; y++)
                {
                    // Основные формулы
                    int n = (4 * x * x) + (y * y);
                    if (n <= limit && (n % 12 == 1 || n % 12 == 5))
                        isPrime[n] = !isPrime[n];

                    n = (3 * x * x) + (y * y);
                    if (n <= limit && n % 12 == 7)
                        isPrime[n] = !isPrime[n];

                    n = (3 * x * x) - (y * y);
                    if (x > y && n <= limit && n % 12 == 11)
                        isPrime[n] = !isPrime[n];
                }
            }
            for (int n = 5; n * n <= limit; n++)
            {
                if (isPrime[n])
                    for (int k = n * n; k <= limit; k += n * n)
                        isPrime[k] = false;
            }
            for (int n = 2; n <= limit; n++)
            {
                if (isPrime[n])
                    primes.Add(n);
            }

            return primes;
        }
    }
}

// Data
namespace SieveApp.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
         public DbSet<History> Histories { get; set; }
    }
}


// Controllers
namespace SieveApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AuthController : ControllerBase
    {
        private readonly AppDbContext _context;
        private readonly JwtService _jwtService;

        public AuthController(AppDbContext context, JwtService jwtService)
        {
            _context = context;
            _jwtService = jwtService;
        }

        [HttpPost("register")]
        public IActionResult Register([FromBody] RegisterRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Username) || string.IsNullOrWhiteSpace(request.Password))
            {
                Console.WriteLine("Ошибка: Логин и пароль не могут быть пустыми.");
                return BadRequest("Username and password are required.");
            }

            if (request.Username.Length < 3)
            {
                Console.WriteLine("Ошибка: Логин должен содержать минимум 3 символа.");
                return BadRequest("Username must be at least 3 characters long.");
            }

            if (request.Password.Length < 6)
            {
                Console.WriteLine("Ошибка: Пароль должен содержать минимум 6 символов.");
                return BadRequest("Password must be at least 6 characters long.");
            }
            if (_context.Users.Any(u => u.Username == request.Username))
            {
                Console.WriteLine("Ошибка: Пользователь с таким логином уже существует.");
                return BadRequest("Username is already taken.");
            }
            var passwordHash = BCrypt.Net.BCrypt.HashPassword(request.Password);
            var newUser = new User
            {
                Username = request.Username,
                PasswordHash = passwordHash,
                Token = null
            };

            _context.Users.Add(newUser);
            _context.SaveChanges();

            Console.WriteLine("Пользователь успешно зарегистрирован.");
            return Ok("User registered successfully.");
        }

        [HttpPost("login")]
        public IActionResult Login([FromBody] LoginRequest request)
        {
            if (string.IsNullOrWhiteSpace(request.Username) || string.IsNullOrWhiteSpace(request.Password))
            {
                Console.WriteLine("Ошибка: Логин и пароль не могут быть пустыми.");
                return BadRequest("Username and password are required.");
            }

            var existingUser = _context.Users.FirstOrDefault(u => u.Username == request.Username);
            if (existingUser == null || !BCrypt.Net.BCrypt.Verify(request.Password, existingUser.PasswordHash))
            {
                Console.WriteLine("Ошибка: Неверный логин или пароль.");
                return Unauthorized("Invalid username or password.");
            }


            var token = _jwtService.GenerateToken(existingUser.Id);
           existingUser.Token = token;
             _context.SaveChanges();

            Console.WriteLine("Пользователь успешно авторизован.");
             return Ok(new {token = token});
        }
    }
    [ApiController]
    [Route("api/[controller]")]
     [Authorize]
     public class SieveController : ControllerBase
    {
        private readonly SieveService _sieveService;
        private readonly AppDbContext _dbContext;

        public SieveController(SieveService sieveService, AppDbContext dbContext)
        {
            _sieveService = sieveService;
             _dbContext = dbContext;
        }


    [HttpGet("prime-numbers-html")]
    public IActionResult GetPrimeNumbersHTML()
    {
        var primes = _sieveService.SieveOfAtkin(LimitStorage.CurrentLimit);
        var html = $@"<!DOCTYPE html>
                     <html>
                     <head>
                     <title>Простые числа</title>
                     </head>
                     <body>
                     <h1>Простые числа до {LimitStorage.CurrentLimit}</h1>
                     <p>{string.Join(", ", primes)}</p>
                     </body>
                     </html>";
        return Content(html, "text/html", System.Text.Encoding.UTF8);

        }
         [HttpPost("calculate-prime-numbers")]
       public IActionResult CalculatePrimeNumbers([FromBody] int limit)
       {
            if (limit <= 0) return BadRequest("Limit must be a positive integer.");
            var username = User.Identity?.Name;
             if (string.IsNullOrEmpty(username))
                return Unauthorized("User not authenticated.");

            var user = _dbContext.Users.FirstOrDefault(u => u.Username == username);
             if (user == null)
                return Unauthorized("User not found.");
            var primes = _sieveService.SieveOfAtkin(limit);
              var historyEntry = new History {
                UserId = user.Id,
                Date = DateTime.Now
            };
              _dbContext.Histories.Add(historyEntry);
            _dbContext.SaveChanges();

        return Ok(new {primes = primes});
    }
     }

 [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class HistoryController : ControllerBase
    {
        private readonly AppDbContext _dbContext;

        public HistoryController(AppDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        [HttpGet("get-history")]
        public async Task<IActionResult> GetHistory()
        {
            var username = User.Identity?.Name;

            if (string.IsNullOrEmpty(username))
                return Unauthorized("User not authenticated.");

            var user = await _dbContext.Users.FirstOrDefaultAsync(u => u.Username == username);

            if (user == null)
                return Unauthorized("User not found.");

            var history = await _dbContext.Histories
                .Where(h => h.UserId == user.Id)
                .ToListAsync();

            return Ok(history);
        }

        [HttpDelete("delete-history")]
        public async Task<IActionResult> DeleteHistory()
        {
            var username = User.Identity?.Name;

            if (string.IsNullOrEmpty(username))
                return Unauthorized("User not authenticated.");

            var user = await _dbContext.Users.FirstOrDefaultAsync(u => u.Username == username);

            if (user == null)
                return Unauthorized("User not found.");

            var history = _dbContext.Histories.Where(h => h.UserId == user.Id);

            _dbContext.Histories.RemoveRange(history);
            await _dbContext.SaveChangesAsync();

            return Ok("History deleted successfully.");
        }
    }
}


// Jwt Service
namespace SieveApp
{
    public class JwtService
    {
        private readonly string _jwtKey;

        public JwtService(string jwtKey)
        {
            _jwtKey = jwtKey;
        }

        public string GenerateToken(int userId)
        {
            var tokenHandler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_jwtKey);
            var tokenDescriptor = new SecurityTokenDescriptor
            {
               Subject = new System.Security.Claims.ClaimsIdentity(new[]
               {
                 new System.Security.Claims.Claim(System.Security.Claims.ClaimTypes.Name, userId.ToString())
            }),
                Expires = DateTime.UtcNow.AddHours(1), // Token expires after 1 hour
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };
            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }
    }
}


namespace SieveApp
{
    public static class LimitStorage
    {
         public static int CurrentLimit { get; set; } = 25;
    }
}
